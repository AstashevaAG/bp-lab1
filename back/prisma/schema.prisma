generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model countries {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(50)
  airports airports[]
  offices  offices[]
}

model offices {
  id        Int       @id @default(autoincrement())
  countryid Int
  title     String    @db.VarChar(50)
  phone     String    @db.VarChar(50)
  contact   String    @db.VarChar(250)
  countries countries @relation(fields: [countryid], references: [id], onDelete: NoAction, onUpdate: NoAction)

  users users[]
}

model roles {
  id    Int     @id @default(autoincrement())
  title String  @db.VarChar(50)
  users users[]
}

model user_sessions {
  id            Int       @id @default(autoincrement())
  userId        Int
  loginTime     DateTime  @default(now())
  logoutTime    DateTime?
  errorOccurred Boolean?  @default(false)
  errorMessage  String?
  users         users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id        Int             @id @default(autoincrement())
  roleid    Int             @default(2)
  email     String          @db.VarChar(150)
  password  String          @db.VarChar(200)
  title     String          @default("user")
  firstname String?         @db.VarChar(50)
  lastname  String          @db.VarChar(50)
  officeid  Int?
  birthdate DateTime?       @db.Date
  active    Boolean?
  offices   offices?        @relation(fields: [officeid], references: [id], onUpdate: NoAction)
  roles     roles           @relation(fields: [roleid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sessions  user_sessions[]
}


model aircrafts {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(50)
  makemodel     String?     @db.VarChar(10)
  totalseats    Int
  economyseats  Int
  businessseats Int
  schedules     schedules[]
}

model airports {
  id                                         Int       @id @default(autoincrement())
  countryid                                  Int
  iatacode                                   String    @db.VarChar(3)
  name                                       String?   @db.VarChar(50)
  countries                                  countries @relation(fields: [countryid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  routes_routes_arrivalairportidToairports   routes[]  @relation("routes_arrivalairportidToairports")
  routes_routes_departureairportidToairports routes[]  @relation("routes_departureairportidToairports")
}

model routes {
  id                                           Int         @id @default(autoincrement())
  departureairportid                           Int
  arrivalairportid                             Int
  distance                                     Int
  flighttime                                   Int
  airports_routes_arrivalairportidToairports   airports    @relation("routes_arrivalairportidToairports", fields: [arrivalairportid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  airports_routes_departureairportidToairports airports    @relation("routes_departureairportidToairports", fields: [departureairportid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schedules                                    schedules[]
}

model schedules {
  id           Int       @id @default(autoincrement())
  date         DateTime  @db.Date
  time         DateTime  @db.Time(6)
  aircraftid   Int
  routeid      Int
  economyprice Float
  confirmed    Boolean
  flightnumber String?   @db.VarChar(10)
  aircrafts    aircrafts @relation(fields: [aircraftid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  routes       routes    @relation(fields: [routeid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}



